// определяем константы
open_time = 9:00
close_time = 17:00
early_price = 1
late_price = 2
mid_price = 2

// Определяем входные переменные
start_time = [list of start times for each application]
end_time = [list of end times for each application]

// инициализация переменных
max_benefit = 0
occupied = False
occupied_until = None

// сортировка по времени
applications = zip(start_time, end_time)
applications = sorted(applications, key=lambda x: x[0])

// каждая заявка
for app in applications:
    app_start, app_end = app
    
    // Рассчитываем выгоду для ранних заявок
    if app_start <= OPEN_TIME and app_end <= 13:00:
        benefit = EARLY_PRICE
    
    // Рассчитываем выгоду для поздних заявок
    else if app_start >= 13:00 and app_end >= CLOSE_TIME:
        benefit = LATE_PRICE
    
    // Рассчитываем выгоду для средних заявок
    else if app_start >= OPEN_TIME and app_end <= CLOSE_TIME and app_start < 13:00 and app_end > 13:00:
        benefit = MID_PRICE
    
    // Рассчитываем выгоду от применения пересечения вверх
    else if app_start < OPEN_TIME and app_end > 13:00:
        benefit = EARLY_PRICE + LATE_PRICE
    
    // Рассчитываем выгоду от заявок с перекрестком в большом направлении
    else if app_start < 13:00 and app_end > CLOSE_TIME:
        benefit = EARLY_PRICE + LATE_PRICE
    
    // Рассчитываем выгоду для незанятых заявок
    else:
        benefit = 0
    
    // Проверка, является ли заявка вторичной занятостью
    if app_start < occupied_until:
        benefit /= 2
    
    // Обновляем максимальную выгоду и занятый статус
    if benefit > max_benefit:
        max_benefit = benefit
        occupied_until = app_end
        occupied = True
        
// Возвращаем максимальную выгоду
return max_benefit
